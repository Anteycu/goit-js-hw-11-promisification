{"version":3,"sources":["webpack:///./index.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","Math","random","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","logger1","table","makeTransaction","transaction","min","max","floor","id","logSuccess","logError","warn","amount","catch"],"mappings":"+KAEMA,EAAQ,SAAAC,GAYZ,OAXgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACOC,KAAKC,SAAW,IAE9BJ,EAAQF,GAIVG,EADc,+BAEbH,OAKDO,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBT,EAAM,KAAMY,KAAKJ,GACjBR,EAAM,KAAMY,KAAKJ,GACjBR,EAAM,MAAMY,KAAKJ,GAKjB,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIhB,SAAQ,SAAAC,GACjBE,YAAW,WACT,IAAMc,EAAeF,EAASG,KAAI,SAAAC,GAChC,OAAIA,EAAKP,OAASI,GAChBG,EAAKN,OAAUM,EAAKN,QAAS,EAAUM,EAAKN,QAAS,EAC9CM,GAEAA,KAGXlB,EAAQgB,KACP,OAIDG,EAAU,SAAAH,GAAY,OAAIT,QAAQa,MAAMJ,IAW9CH,EAAgBH,EAAO,SAASD,KAAKU,GACrCN,EAAgBH,EAAO,OAAOD,KAAKU,GAKnC,IAIME,EAAkB,SAAAC,GACtB,OAAO,IAAIvB,SAAQ,SAACC,EAASC,GAC3B,IAN+BsB,EAAKC,EAM9B3B,GANyB0B,EAMS,IANJC,EAMS,IALxCrB,KAAKsB,MAAMtB,KAAKC,UAAYoB,EAAMD,EAAM,GAAKA,IAMlDrB,YAAW,WACUC,KAAKC,SAAW,GAEjCJ,EAAQsB,EAAYI,GAAI7B,GAExBI,EAAOqB,EAAYI,MAEpB7B,OAID8B,EAAa,SAACD,EAAIpB,GACtBC,QAAQC,IAAR,eAA2BkB,EAA3B,iBAA8CpB,EAA9C,OAGIsB,EAAW,SAAAF,GACfnB,QAAQsB,KAAR,gCAA6CH,EAA7C,8BAaFL,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAAOrB,KAAKkB,GAAYI,MAAMH,GAEhEP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAAOrB,KAAKkB,GAAYI,MAAMH,GAEhEP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,KAAMrB,KAAKkB,GAAYI,MAAMH,GAE/DP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAAOrB,KAAKkB,GAAYI,MAAMH,K","file":"main.d210027e8259575d3190.js","sourcesContent":["import './styles.css';\n\nconst delay = ms => {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const success = Math.random() > 0.1;\n      if (success) {\n        resolve(ms);\n      }\n\n      const error = 'Error happen, unlucky >_<';\n      reject(error);\n    }, ms);\n  });\n  return promise;\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback - функцию callback,\n//     а принимала всего два параметра allUsers и userName и возвращала промис.\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const updatedUsers = allUsers.map(user => {\n        if (user.name === userName) {\n          user.active ? (user.active = false) : (user.active = true);\n          return user;\n        } else {\n          return user;\n        }\n      });\n      resolve(updatedUsers);\n    }, 0);\n  });\n};\n\nconst logger1 = updatedUsers => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, 'Mango', logger1);\n// toggleUserState(users, 'Lux', logger1);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger1);\ntoggleUserState(users, 'Lux').then(logger1);\n\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback - функции onSuccess и onError,\n//     а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n      if (canProcess) {\n        resolve(transaction.id, delay);\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = (id, time) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"],"sourceRoot":""}